/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => TemplatedDailyNotesPlugin
});
module.exports = __toCommonJS(src_exports);
var import_obsidian4 = require("obsidian");

// src/classes/l18n.ts
var texts = {
  "ribbon:hint": "Add new daily note",
  "settings-edit-ribbon-modal:folder-field-description-text": "Folder absolute path (from vault root)",
  "settings-edit-ribbon-modal:folder-field-name": "Folder",
  "settings-edit-ribbon-modal:hint-field-description-text": "Hint for display on icon hover",
  "settings-edit-ribbon-modal:hint-field-name": "Hint",
  "settings-edit-ribbon-modal:icon-field-description-html": 'Browse to <a href="https://lucide.dev">lucide.dev</a> to see all available icons and their corresponding names.',
  "settings-edit-ribbon-modal:icon-field-name": "Icon",
  "settings-edit-ribbon-modal:submit": "Submit",
  "settings-edit-ribbon-modal:template-field-description-text": "Template file full name (with extention)",
  "settings-edit-ribbon-modal:template-field-name": "Template",
  "settings-edit-ribbon-modal:title-create": "Create ribbon",
  "settings-edit-ribbon-modal:title-edit": 'Edit "{{name}}" ribbon',
  "settings-tab:button-add": "Add new rule",
  "settings-tab:button-delete": "Delete",
  "settings-tab:button-edit": "Edit",
  "settings-tab:description": "To be able to create rules, you must specify a folder with templates. Please check your application settings before proceeding.",
  "settings-tab:ribbon-value": 'Ribbon icon "{{icon}}" with hint "{{hint}}" for create note in folder "{{folder}}" with template "{{template}}"',
  "settings-tab:title": "Templated daily notes rules"
};
var L18n = class {
  get(slug, params = {}) {
    var _a;
    let str = (_a = texts[slug]) != null ? _a : "";
    Object.keys(params).forEach((param) => {
      str = str.replace(`{{${param}}}`, params[param]);
    });
    return str;
  }
};

// src/classes/settings-tab.ts
var import_obsidian3 = require("obsidian");

// src/classes/settings-edit-ribbon-modal.ts
var import_obsidian2 = require("obsidian");

// src/classes/vault-value-object.ts
var import_obsidian = require("obsidian");
var VaultValueObjectArray = class {
  constructor() {
    this.value = [];
  }
  get state() {
    return this.value;
  }
  concat(arr) {
    if (Array.isArray(arr)) {
      this.value = this.value.concat(arr);
    } else {
      this.value = this.value.concat(arr.state);
    }
    return this;
  }
  toMap() {
    return this.value.reduce((acc, node) => {
      acc[node] = node;
      return acc;
    }, {});
  }
};
var VaultValueObject = class {
  constructor(vault) {
    this.vault = vault;
  }
  async readFile(path) {
    var _a;
    try {
      const file = this.vault.getAbstractFileByPath(path);
      if (!file) {
        return "";
      }
      if (!(file instanceof import_obsidian.TFile)) {
        return "";
      }
      return (_a = await this.vault.read(file)) != null ? _a : null;
    } catch (e) {
      return "";
    }
  }
  async createTemplatedFile(path, templatePath) {
    const result = this.vault.getAbstractFileByPath(path);
    if (!result) {
      const templateContent = await this.readFile(templatePath);
      const file = await this.vault.create(path, templateContent);
      return file;
    } else if (result instanceof import_obsidian.TFile) {
      return result;
    }
    return null;
  }
  async loadTemplatesList() {
    var _a;
    const result = new VaultValueObjectArray();
    try {
      const settings = JSON.parse(await this.vault.adapter.read(`${this.vault.configDir}/templates.json`));
      if (!settings.folder) {
        return result;
      }
      result.concat((_a = await this.vault.adapter.list(settings.folder)) == null ? void 0 : _a.files);
    } catch (e) {
    }
    return result;
  }
  async loadDirectoryList(root = "/") {
    const result = new VaultValueObjectArray();
    try {
      const list = (await this.vault.adapter.list(root)).folders.filter((name) => name !== this.vault.configDir);
      result.concat(list);
      for (let i = 0; i < list.length; ++i) {
        const subfolders = await this.loadDirectoryList(list[i]);
        result.concat(subfolders);
      }
    } catch (e) {
    }
    return result;
  }
};

// src/classes/settings-edit-ribbon-modal.ts
var SettingsEditRibbonModal = class extends import_obsidian2.Modal {
  constructor(plugin, model) {
    super(plugin.app);
    this.onSubmitActions = null;
    this.l18n = new L18n();
    this.model = Object.assign({}, model);
    this.vaultvo = new VaultValueObject(plugin.app.vault);
    this.titleEl.createDiv({
      text: this.model.hint ? this.l18n.get("settings-edit-ribbon-modal:title-edit", { name: this.model.hint }) : this.l18n.get("settings-edit-ribbon-modal:title-create")
    });
  }
  async initIconField(content) {
    const setting = new import_obsidian2.Setting(content).setName(this.l18n.get("settings-edit-ribbon-modal:icon-field-name")).addText((text) => {
      text.setValue(this.model.icon).onChange((v) => {
        this.model.icon = v;
      });
    }).setDisabled(false);
    setting.descEl.innerHTML = this.l18n.get("settings-edit-ribbon-modal:icon-field-description-html");
  }
  async initHintField(content) {
    new import_obsidian2.Setting(content).setName(this.l18n.get("settings-edit-ribbon-modal:hint-field-name")).setDesc(this.l18n.get("settings-edit-ribbon-modal:hint-field-description-text")).addText((text) => {
      text.setValue(this.model.hint).onChange((v) => {
        this.model.hint = v;
      });
    }).setDisabled(false);
  }
  async initFolderField(content) {
    const folders = (await this.vaultvo.loadDirectoryList()).toMap();
    new import_obsidian2.Setting(content).setName(this.l18n.get("settings-edit-ribbon-modal:folder-field-name")).setDesc(this.l18n.get("settings-edit-ribbon-modal:folder-field-description-text")).addDropdown((dd) => {
      dd.addOptions(folders).setValue(this.model.folder).onChange((v) => {
        this.model.folder = v;
      });
    }).setDisabled(false);
  }
  async initTemplateField(content) {
    const templates = (await this.vaultvo.loadTemplatesList()).toMap();
    new import_obsidian2.Setting(content).setName(this.l18n.get("settings-edit-ribbon-modal:template-field-name")).setDesc(this.l18n.get("settings-edit-ribbon-modal:template-field-description-text")).addDropdown((dd) => {
      dd.addOptions(templates).setValue(this.model.template).onChange((v) => {
        this.model.template = v;
      });
    }).setDisabled(false);
  }
  async display() {
    const root = this.contentEl;
    root.empty();
    const content = root.createDiv();
    await this.initIconField(content);
    await this.initHintField(content);
    await this.initTemplateField(content);
    await this.initFolderField(content);
    new import_obsidian2.Setting(content).addButton((button) => {
      return button.setButtonText(this.l18n.get("settings-edit-ribbon-modal:submit")).setCta().onClick(() => {
        var _a;
        (_a = this.onSubmitActions) == null ? void 0 : _a.call(this, this.model);
        this.close();
      });
    });
  }
  onOpen() {
    this.display();
  }
  onSubmit(fn) {
    this.onSubmitActions = fn;
    return this;
  }
};

// src/classes/settings-tab.ts
var SettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin, settingsvo) {
    super(app, plugin);
    this.plugin = plugin;
    this.settingsvo = settingsvo;
    this.l18n = new L18n();
  }
  display() {
    const root = this.containerEl;
    const settings = this.settingsvo;
    root.empty();
    root.createEl("h1", { text: this.l18n.get("settings-tab:title") });
    root.createEl("p", { text: this.l18n.get("settings-tab:description"), cls: "templayted-daily-notes__settings-attention" });
    settings.ribbons.forEach((value) => {
      const setting = new import_obsidian3.Setting(root);
      setting.infoEl.createDiv({
        text: this.l18n.get("settings-tab:ribbon-value", {
          icon: value.icon,
          hint: value.hint,
          folder: value.folder,
          template: value.template || "-"
        })
      });
      setting.addExtraButton((button) => {
        button.setIcon("cross").setTooltip(this.l18n.get("settings-tab:button-delete")).onClick(async () => {
          await settings.deleteRibbonById(value.id);
          this.display();
        });
      }).addExtraButton((button) => {
        button.setIcon("pencil").setTooltip(this.l18n.get("settings-tab:button-edit")).onClick(async () => {
          new SettingsEditRibbonModal(this.plugin, value).onSubmit(async (ribbon) => {
            await settings.replaceRibbon(ribbon);
            this.display();
          }).open();
        });
      });
    });
    new import_obsidian3.Setting(root).addButton((button) => {
      return button.setButtonText(this.l18n.get("settings-tab:button-add")).setCta().onClick(() => {
        new SettingsEditRibbonModal(
          this.plugin,
          {
            id: new Date().getTime().toString(),
            icon: "",
            hint: "",
            template: "",
            folder: ""
          }
        ).onSubmit(async (ribbon) => {
          await settings.addRibbon(ribbon);
          this.display();
        }).open();
      });
    });
  }
};

// src/classes/settings-value-object.ts
var SettingsValueObject = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.value = null;
  }
  get ribbons() {
    var _a, _b;
    return (_b = (_a = this.value) == null ? void 0 : _a.ribbons) != null ? _b : [];
  }
  async load() {
    this.value = Object.assign({}, {
      ribbons: []
    }, await this.plugin.loadData());
  }
  async deleteRibbonById(id) {
    var _a;
    if (!((_a = this.value) == null ? void 0 : _a.ribbons)) {
      return;
    }
    this.value.ribbons = this.value.ribbons.filter((ribbon) => ribbon.id !== id);
    await this.plugin.saveData(this.value);
  }
  async replaceRibbon(value) {
    var _a;
    if (!((_a = this.value) == null ? void 0 : _a.ribbons)) {
      return;
    }
    this.value.ribbons = this.value.ribbons.map((ribbon) => {
      if (ribbon.id !== value.id) {
        return ribbon;
      }
      return value;
    });
    await this.plugin.saveData(this.value);
  }
  async addRibbon(value) {
    var _a;
    if (!((_a = this.value) == null ? void 0 : _a.ribbons)) {
      return;
    }
    this.value.ribbons = [
      ...this.value.ribbons,
      value
    ];
    await this.plugin.saveData(this.value);
  }
};

// src/index.ts
var TemplatedDailyNotesPlugin = class extends import_obsidian4.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.settings = new SettingsValueObject(this);
    this.vaultvo = new VaultValueObject(app.vault);
    this.l18n = new L18n();
  }
  async createTodayFile(templatePath, folder) {
    if (!folder) {
      return;
    }
    const path = `${folder}/${window.moment().format("YYYY-MM-DD")}.md`;
    const result = await this.vaultvo.createTemplatedFile(path, templatePath);
    if (result) {
      this.app.workspace.getLeaf().openFile(result);
    }
  }
  async onload() {
    await this.settings.load();
    this.addRibbonIcon("list-plus", this.l18n.get("ribbon:hint"), async (event) => {
      const menu = new import_obsidian4.Menu();
      this.settings.ribbons.forEach((ribbon) => {
        menu.addItem((item) => {
          return item.setTitle(ribbon.hint).setIcon(ribbon.icon).onClick(() => {
            this.createTodayFile(ribbon.template, ribbon.folder);
          });
        });
      });
      menu.showAtMouseEvent(event);
    });
    this.addSettingTab(new SettingsTab(this.app, this, this.settings));
  }
};
